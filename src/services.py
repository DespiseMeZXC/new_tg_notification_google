import logging
import json
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Tuple, Any, Optional

from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram import Bot

from google_calendar_client import GoogleCalendarClient
from queries import DatabaseQueries

# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

class BotService:
    def __init__(
        self, db: DatabaseQueries, calendar_client: GoogleCalendarClient, bot: Bot
    ):
        self.db = db
        self.bot = bot
        self.calendar_client = calendar_client

    def validate_token_json(
        self, token_json: str
    ) -> Tuple[bool, str, Optional[Dict[str, Any]]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON-–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞"""
        try:
            token_data = json.loads(token_json)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            if "token" not in token_data or "refresh_token" not in token_data:
                return (
                    False,
                    "‚ùå JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è 'token' –∏ 'refresh_token'",
                    None,
                )

            return (
                True,
                "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /week –∏ /check.",
                token_data,
            )
        except json.JSONDecodeError:
            return (
                False,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                None,
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", None

    def get_statistics(self, user_id: int, period: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å—Ç—Ä–µ—á–∞–º"""
        if not period:
            return "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø–µ—Ä–∏–æ–¥"
        
        events = self.db.events.get_statistics(user_id, period)
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
        total_events = len(events)

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
        total_minutes = sum(
            (event.end_time - event.start_time).total_seconds() / 60
            for event in events
        )

        now = datetime.now(timezone.utc) - timedelta(days=datetime.now(timezone.utc).weekday())
        period_text = {
            "week": f"–Ω–µ–¥–µ–ª—é {now.strftime('%d.%m')} - {datetime.now(timezone.utc).strftime('%d.%m')}",
            "month": f"{now.strftime('%B').replace('March', '–ú–∞—Ä—Ç').replace('April', '–ê–ø—Ä–µ–ª—å').replace('May', '–ú–∞–π').replace('June', '–ò—é–Ω—å').replace('July', '–ò—é–ª—å').replace('August', '–ê–≤–≥—É—Å—Ç').replace('September', '–°–µ–Ω—Ç—è–±—Ä—å').replace('October', '–û–∫—Ç—è–±—Ä—å').replace('November', '–ù–æ—è–±—Ä—å').replace('December', '–î–µ–∫–∞–±—Ä—å').replace('January', '–Ø–Ω–≤–∞—Ä—å').replace('February', '–§–µ–≤—Ä–∞–ª—å')} {now.strftime('%Y')} –≥–æ–¥–∞",
            "year": f"{now.strftime('%Y')} –≥–æ–¥"
        }.get(period, f"{period}")

        statistics = f"–ó–∞ {period_text}:\n" \
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á: {total_events}\n" \
                    f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {int(total_minutes // 60)} —á {int(total_minutes % 60)} –º–∏–Ω"
        return statistics
    
    async def send_deleted_events(
        self, user_id: int, deleted_events: List[Dict[str, Any]]
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–∞–º
        events_by_date = {}
        for event in deleted_events:
            start_dt = event['start']
            day_key = start_dt.strftime("%d.%m.%Y")
            if day_key not in events_by_date:
                events_by_date[day_key] = []
            events_by_date[day_key].append(event)

        message = "–í—Å—Ç—Ä–µ—á–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã:"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–∞–º
        for date in sorted(events_by_date.keys()):
            message += f"\nüìÖ –û–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ {date}:\n"
            for event in events_by_date[date]:
                message += (
                    f"üóëÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {event['summary']}\n"
                    f"üïí –í—Ä–µ–º—è: {event['start'].strftime('%H:%M')} - {event['end'].strftime('%H:%M')}\n"
                )

        await self.bot.send_message(user_id, message)

    async def send_updated_events(
        self, user_id: int, updated_events: List[Dict[str, Any]]
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö"""
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {updated_events}")
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–∞–º
        events_by_date = {}
        for event in updated_events:
            start_dt = event['start']
            day_key = start_dt.strftime("%d.%m.%Y")
            if day_key not in events_by_date:
                events_by_date[day_key] = []
            events_by_date[day_key].append(event)

        message = "" 
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–∞–º
        for date in sorted(events_by_date.keys()):
            message += f"\nüîÑ –í—Å—Ç—Ä–µ—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –¥–∞—Ç—É: {date}\n"
            for event in events_by_date[date]:
                message += "–ë—ã–ª–æ:\n"
                message += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {event['old_summary']}\n"
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime
                old_start = self.safe_parse_datetime(event['old_start']) if isinstance(event['old_start'], str) else event['old_start']
                old_end = self.safe_parse_datetime(event['old_end']) if isinstance(event['old_end'], str) else event['old_end']
                
                message += f"üïí –í—Ä–µ–º—è: {old_start.strftime('%H:%M')} - {old_end.strftime('%H:%M')}\n"
                message += "–°—Ç–∞–ª–æ:\n" 
                message += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {event['summary']}\n"
                message += f"üïí –í—Ä–µ–º—è: {event['start'].strftime('%H:%M')} - {event['end'].strftime('%H:%M')}\n"
                message += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É: {event['old_meet_link']}\n"

        await self.bot.send_message(user_id, message)
    
    async def get_week_meetings(
        self, user_id: int
    ) -> Tuple[bool, str, Dict[str, List[Dict[str, Any]]], List[Dict[str, Any]], List[Dict[str, Any]], List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ –¥–Ω—è–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if not self.db.tokens.get_token(user_id):
                return (
                    False,
                    "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google Calendar.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                    {},
                    [],
                    [],
                    [],
                )

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏—Ö –≤—Å—Ç—Ä–µ—á
            now = datetime.now(timezone.utc)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            weekday = now.weekday()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            if weekday < 5:  # –ë—É–¥–Ω–∏ (–ø–Ω-–ø—Ç)
                # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –ø—è—Ç–Ω–∏—Ü—É
                days_until_friday = 4 - weekday  # 4 = –ø—è—Ç–Ω–∏—Ü–∞
                time_max = now + timedelta(days=days_until_friday)
            else:  # –í—ã—Ö–æ–¥–Ω—ã–µ (—Å–±-–≤—Å)
                # –ù–∞—Ö–æ–¥–∏–º –ø—è—Ç–Ω–∏—Ü—É —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
                days_until_next_friday = 5 + (7 - weekday)  # 5 –¥–Ω–µ–π –¥–æ –ø—è—Ç–Ω–∏—Ü—ã + –¥–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏
                time_max = now + timedelta(days=days_until_next_friday)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            events = await self.calendar_client.get_upcoming_events(
                user_id=user_id,
                time_min=now,
                time_max=time_max,
                limit=50,
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
            active_events = []
            for event in events:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if "hangoutLink" not in event:
                    continue
                logger.info(f"event: {event.get('start')}")
                logger.info(f"event: {event.get('end')}")
                end_time = event["end"].get("dateTime", event["end"].get("date"))
                end_dt = self.safe_parse_datetime(end_time)
                if end_dt > now:
                    active_events.append(event)

            if not active_events:
                return True, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é.", {}, [], [], []
            deleted_events = self.db.events.check_deleted_events(user_id, active_events, now, time_max)
            updated_events = self.db.events.check_updated_event(user_id, active_events)
            print(f"updated_events: {updated_events}")
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –¥–Ω—è–º
            meetings_by_day: Dict[str, List[Dict[str, Any]]] = {}
            for event in active_events:
                start_time = event["start"].get("dateTime", event["start"].get("date"))
                start_dt = self.safe_parse_datetime(start_time)
                day_key = start_dt.strftime("%d.%m.%Y")

                if day_key not in meetings_by_day:
                    meetings_by_day[day_key] = []

                meetings_by_day[day_key].append(event)

            return True, "", meetings_by_day, active_events, deleted_events, updated_events

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é: {e}")
            return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å—Ç—Ä–µ—á–∞—Ö.", {}, [], [], []

    @staticmethod
    def safe_parse_datetime(date_str: str) -> datetime:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime"""
        try:
            if date_str.endswith("Z"):
                return datetime.fromisoformat(date_str.replace("Z", "+00:00"))
            elif "+" in date_str or "-" in date_str and "T" in date_str:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ UTC
                dt = datetime.fromisoformat(date_str)
                return dt.astimezone(timezone.utc)
            else:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º UTC
                return datetime.fromisoformat(date_str).replace(tzinfo=timezone.utc)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã {date_str}: {e}")
            return datetime.now(timezone.utc)

    async def send_meetings_check_by_day(
        self,
        user_id: int,
        meetings_by_day: dict,
    ) -> None:
        logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏: {meetings_by_day}")
        for day, day_events in sorted(meetings_by_day.items()):
            day_message = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∏:\n"
            logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–Ω—å: {day}")
            day_message += f"üìÜ {hbold(f'–û–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ {day}:')}\n"

            has_new_events = False
            for event in day_events:
                notification = self.db.notifications.get_notification(
                    event["id"], user_id  # type: ignore
                )
                if notification:
                    logging.info(
                        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event['id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    )
                    continue

                has_new_events = True
                start_time = event["start"].get("dateTime", event["start"].get("date"))
                start_dt = self.safe_parse_datetime(start_time)
                end_time = event["end"].get("dateTime", event["end"].get("date"))
                end_dt = self.safe_parse_datetime(end_time)
                day_message += (
                    f"üìù {hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')} {event['summary']}\n"
                    f"üïí {hbold('–í—Ä–µ–º—è:')} {start_dt.strftime('%H:%M')} - {end_dt.strftime('%H:%M')}\n"
                    f"üîó {hbold('–°—Å—ã–ª–∫–∞:')} {event['hangoutLink']}\n\n"
                )
                self.db.notifications.create_notification(
                    event["id"], user_id  # type: ignore
                )

            if has_new_events:
                await self.bot.send_message(user_id, day_message, parse_mode="HTML")

    async def send_meetings_week_by_day(
        self,
        user_id: int,
        meetings_by_day: dict,
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å—Ç—Ä–µ—á–∞–º–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ –¥–Ω—è–º"""
        for day, day_events in sorted(meetings_by_day.items()):
            day_message = f"üìÜ {hbold(f'–û–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ {day}:')}\n"

            for event in day_events:
                start_time = event["start"].get("dateTime", event["start"].get("date"))
                start_dt = self.safe_parse_datetime(start_time)
                end_time = event["end"].get("dateTime", event["end"].get("date"))
                end_dt = self.safe_parse_datetime(end_time)
                day_message += (
                    f"üìù {hbold('–ù–∞–∑–≤–∞–Ω–∏–µ:')} {event['summary']}\n"
                    f"üïí {hbold('–í—Ä–µ–º—è:')} {start_dt.strftime('%H:%M')} - {end_dt.strftime('%H:%M')}\n"
                    f"üîó {hbold('–°—Å—ã–ª–∫–∞:')} {event['hangoutLink']}\n\n"
                )
                self.db.events.save_event(user_id, event)
                self.db.notifications.create_notification(
                    event["id"], user_id  # type: ignore
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏
            await self.bot.send_message(user_id, day_message, parse_mode="HTML")
