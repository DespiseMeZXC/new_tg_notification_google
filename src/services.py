import logging
import json
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Tuple, Any, Optional

from aiogram.types import Message
from aiogram.utils.markdown import hbold

from google_calendar_client import GoogleCalendarClient
from queries import DatabaseQueries


class BotService:
    def __init__(self, db: DatabaseQueries, calendar_client: GoogleCalendarClient):
        self.db = db
        self.calendar_client = calendar_client

    def validate_token_json(
        self, token_json: str
    ) -> Tuple[bool, str, Optional[Dict[str, Any]]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON-–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞"""
        try:
            token_data = json.loads(token_json)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            if "token" not in token_data or "refresh_token" not in token_data:
                return (
                    False,
                    "‚ùå JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è 'token' –∏ 'refresh_token'",
                    None,
                )

            return (
                True,
                "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /week –∏ /check.",
                token_data,
            )
        except json.JSONDecodeError:
            return (
                False,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                None,
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", None

    async def get_week_meetings(
        self, user_id: int
    ) -> Tuple[bool, str, Dict[str, List[Dict[str, Any]]], List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ –¥–Ω—è–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if not self.db.tokens.get_token(user_id):
                return (
                    False,
                    "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google Calendar.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                    {},
                    [],
                )

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏—Ö –≤—Å—Ç—Ä–µ—á
            now = datetime.now(timezone.utc)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
            events = await self.calendar_client.get_upcoming_events(
                user_id=user_id,
                time_min=now,
                time_max=now + timedelta(days=7),
                limit=20,
            )

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
            active_events = []
            for event in events:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if "hangoutLink" not in event:
                    continue

                end_time = event["end"].get("dateTime", event["end"].get("date"))
                end_dt = self.safe_parse_datetime(end_time)
                if end_dt > now:
                    active_events.append(event)

            if not active_events:
                return True, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é.", {}, []

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –¥–Ω—è–º
            meetings_by_day: Dict[str, List[Dict[str, Any]]] = {}
            for event in active_events:
                start_time = event["start"].get("dateTime", event["start"].get("date"))
                start_dt = self.safe_parse_datetime(start_time)
                day_key = start_dt.strftime("%d.%m.%Y")

                if day_key not in meetings_by_day:
                    meetings_by_day[day_key] = []

                meetings_by_day[day_key].append(event)

            return True, "", meetings_by_day, active_events

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é: {e}")
            return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å—Ç—Ä–µ—á–∞—Ö.", {}, []

    @staticmethod
    def safe_parse_datetime(date_str: str) -> datetime:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime"""
        try:
            if date_str.endswith("Z"):
                return datetime.fromisoformat(date_str.replace("Z", "+00:00"))
            elif "+" in date_str or "-" in date_str and "T" in date_str:
                return datetime.fromisoformat(date_str)
            else:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º UTC
                return datetime.fromisoformat(date_str).replace(tzinfo=timezone.utc)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã {date_str}: {e}")
            return datetime.now(timezone.utc)

    async def send_meetings_by_day(
        self, message: Message, meetings_by_day: dict, is_check: bool = False
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å—Ç—Ä–µ—á–∞–º–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ –¥–Ω—è–º"""
        for day, day_events in sorted(meetings_by_day.items()):
            day_message = f"üìÜ {hbold(f'–û–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ {day}:')}\n\n"
            has_meetings = False

            for event in day_events:
                if is_check:
                    notification = self.db.notifications.get_notification(
                        event["id"], message.from_user.id  # type: ignore
                    )
                    if notification:
                        logging.info(
                            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event['id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                        )
                        continue
                start_time = event["start"].get("dateTime", event["start"].get("date"))
                start_dt = self.safe_parse_datetime(start_time)

                day_message += (
                    f"üïí {start_dt.strftime('%H:%M')} - {hbold(event['summary'])}\n"
                )
                day_message += f"üîó {event['hangoutLink']}\n\n"
                has_meetings = True
                if not is_check:
                    self.db.notifications.create_notification(
                        event["id"], message.from_user.id  # type: ignore
                    )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏
            if has_meetings:
                await message.answer(day_message, parse_mode="HTML")
