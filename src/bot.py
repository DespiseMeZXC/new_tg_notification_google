import os
import asyncio
import logging
import signal
import sys
import json
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ForceReply,
    InlineKeyboardMarkup,
    CallbackQuery,
)
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv

from google_calendar_client import GoogleCalendarClient
from queries import DatabaseQueries
from services import BotService
from inline_buttons import StatisticsCallbackFactory, FeedbackCallbackFactory
from buttons import KeyboardAccount, KeyboardAccountsList, KeyboardAccountActions
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)
BASE_DIR = Path(__file__).resolve().parent.parent

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
db = DatabaseQueries(os.getenv("DATABASE_URL"))
calendar_client = GoogleCalendarClient(db)
bot = Bot(token=str(os.getenv("BOT_TOKEN")))
bot_service = BotService(db, calendar_client, bot)
dp = Dispatcher()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def schedule_meetings_check():
    """"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
            users = db.tokens.get_all_users()
            for user in users:
                (
                    success,
                    error_message,
                    meetings_by_day,
                    active_events,
                    deleted_events,
                    updated_events,
                ) = await bot_service.get_check_meetings(user)
                event_ids = tuple(event["id"] for event in active_events)
                if updated_events:
                    await bot_service.send_updated_events(user, updated_events)
                if deleted_events:
                    await bot_service.send_deleted_events(user, deleted_events)
                if db.notifications.check_all_notifications_sent(event_ids, user):
                    continue
                for i in range(len(active_events)):
                    status = db.events.save_event(user, active_events[i])
                await bot_service.send_meetings_check_by_day(user, meetings_by_day)
                if not success:
                    await bot.send_message(user, error_message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å—Ç—Ä–µ—á: {e}")
        await asyncio.sleep(int(os.getenv("CHECK_INTERVAL", 150)))
        # await asyncio.sleep(10)


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
async def on_shutdown(signal_type):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_type.name}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db.db.close_all_sessions()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    await bot.session.close()

    sys.exit(0)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def command_start(message: Message) -> None:
    if message.from_user is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    
    user_data = {
        "id": message.from_user.id,
        "username": message.from_user.username or "",
        "full_name": message.from_user.full_name or "",
        "is_bot": message.from_user.is_bot,
        "language_code": message.from_user.language_code or "",
    }
    
    db.users.add_user(user_data)
    user_id = message.from_user.id

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name if message.from_user.full_name else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n"
        "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–∑–≤–æ–Ω–∞—Ö –≤ Google Meet.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google Calendar.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
        "1. –ß–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: /auth (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "2. –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π): /manualtoken\n"
        "–ï—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∏–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @ImTaske\n"
        "–û–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /feedback",
        reply_markup=KeyboardAccount().keyboard_account
    )

    logging.info(
        f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, –∏–º—è: {message.from_user.full_name if message.from_user.full_name else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    )
    
    
@dp.message(F.text == "üîê –ê–∫–∫–∞—É–Ω—Ç—ã Google")
async def accounts_command(message: Message) -> None:
    if not message.from_user:
        return
    
    user_tokens = db.tokens.get_all_tokens_by_user_id(message.from_user.id)
    if not user_tokens:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Google.\n"
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth"
        )
        return

    user_emails = [f"üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ {token.email}" for token in user_tokens if token.email]
   
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=KeyboardAccountsList().get_keyboard_accounts_list(user_emails)
    )


@dp.message(F.text == "üîê –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def add_account_command(message: Message) -> None:
    await message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


@dp.message(lambda message: message.text and message.text.startswith("üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ ") and "@" in message.text)
async def account_info(message: Message) -> None:
    if not message.from_user:
        return
        
    email = message.text.replace("üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ ", "")
    user_tokens = db.tokens.get_all_tokens_by_user_id(message.from_user.id)
    selected_token = next((token for token in user_tokens if token.email == email), None)
    
    if selected_token:
        await message.answer(
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:\n"
            f"Email: {email}\n"
            f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {selected_token.created_at.strftime('%d.%m.%Y %H:%M')}\n",
            reply_markup=KeyboardAccountActions().get_keyboard_account_actions()
        )
    else:
        await message.answer(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=KeyboardAccount().keyboard_account
        )

@dp.message(F.text == "üîê –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def handle_account_select(message: Message) -> None:
    if not message.from_user:
        return
    user_tokens = db.tokens.get_all_tokens_by_user_id(message.from_user.id)
    if not user_tokens:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Google.\n"
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth"
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "‚ùå –£–¥–∞–ª–∏—Ç—å email@gmail.com"
    user_emails = [f"‚ùå –£–¥–∞–ª–∏—Ç—å {token.email}" for token in user_tokens if token.email]
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=KeyboardAccountsList().get_keyboard_accounts_list(user_emails)
    )

@dp.message(lambda message: message.text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å ") and "@" in message.text)
async def delete_specific_account(message: Message) -> None:
    if not message.from_user:
        return
        
    # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    email = message.text.replace("‚ùå –£–¥–∞–ª–∏—Ç—å ", "")
    user_tokens = db.tokens.get_all_tokens_by_user_id(message.from_user.id)
    selected_token = next((token for token in user_tokens if token.email == email), None)
    
    if selected_token:
        if db.tokens.delete_token_by_user_id(message.from_user.id):
            await message.answer(
                f"–ê–∫–∫–∞—É–Ω—Ç {email} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                reply_markup=KeyboardAccount().keyboard_account
            )
        else:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=KeyboardAccount().keyboard_account
            )
    else:
        await message.answer(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=KeyboardAccount().keyboard_account
        )
            
# –ö–æ–º–∞–Ω–¥–∞ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
@dp.message(Command("auth"))
async def server_auth_command(message: Message) -> None:
    if not message.from_user:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    auth_url = calendar_client.create_auth_url(message.from_user.id)

    if isinstance(auth_url, str) and auth_url.startswith("–û—à–∏–±–∫–∞"):
        await message.answer(
            f"‚ùå {auth_url}\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    auth_message = await message.answer(
        "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:</b>\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n"
        f"{auth_url}\n\n"
        "2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç Google –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n\n"
        "3Ô∏è‚É£ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "‚ùó –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n"
        "- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Google (–Ω–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π)\n"
        "- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ\n"
        "- –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /manualtoken\n"
        "–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @ImTaske",
        parse_mode="HTML",
        reply_markup=ForceReply(
            selective=True, input_field_placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        ),
    )
    db.tokens.set_auth_message_id(message.from_user.id, str(auth_message.message_id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä F.reply_to_message
@dp.message(F.reply_to_message)
async def handle_reply(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_message_id = db.tokens.get_auth_message_id(user_id)
    if auth_message_id and int(message.reply_to_message.message_id) == int(
        auth_message_id
    ):
        await handle_auth_code_logic(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    feedback_message_id = db.feedback.get_feedback_message_id(user_id)
    if feedback_message_id and int(message.reply_to_message.message_id) == int(
        feedback_message_id
    ):
        await handle_feedback_logic(message)
        return


async def handle_auth_code_logic(code_message: Message) -> None:
    """–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    code = code_message.text.strip()
    if not code:
        await code_message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await code_message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        success, message_text = await calendar_client.process_auth_code(
            code_message.from_user.id,
            code,
            {
                "id": code_message.from_user.id,
                "username": code_message.from_user.username,
                "full_name": code_message.from_user.full_name,
                "is_bot": code_message.from_user.is_bot,
                "language_code": code_message.from_user.language_code,
            },
        )

        await processing_msg.edit_text(message_text)

        if not success:
            await code_message.answer(
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manualtoken –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞"
            )

    except Exception as e:
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manualtoken"
        )


async def handle_feedback_logic(feedback_msg: Message) -> None:
    """–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    db.feedback.set_content_feedback(
        feedback_msg.from_user.id,
        feedback_msg.reply_to_message.message_id,
        feedback_msg.text,
    )

    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {feedback_msg.from_user.id}: {feedback_msg.text}"
    )

    await feedback_msg.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, "
        "–≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: @ImTaske\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=FeedbackCallbackFactory(
                feedback_msg.reply_to_message.message_id
            ).get_feedback_buttons()
        ),
    )


@dp.message(Command("statistics"))
async def statistics_command(message: Message) -> None:
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=StatisticsCallbackFactory().get_buttons()
    )

    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=keyboard
    )


@dp.callback_query(lambda c: json.loads(c.data).get("t") == "statistics")
async def process_statistics_callback(callback_query: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    t - —Ç–∏–ø callback
    d - –ø–µ—Ä–∏–æ–¥
    """
    data = json.loads(callback_query.data)
    period = data.get("d")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–∏–æ–¥: {period}")
    user_id = callback_query.from_user.id

    await callback_query.answer()
    statistics = bot_service.get_statistics(user_id, period)
    await callback_query.message.edit_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}:\n{statistics}")


@dp.message(Command("check"))
async def check_command(message: Message) -> None:
    if not db.tokens.get_token(message.from_user.id):
        await message.answer(
            "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google Calendar.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )
        return
    message_check = await message.answer(
        "üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )
    (
        success,
        error_message,
        meetings_by_day,
        active_events,
        deleted_events,
        updated_events,
    ) = await bot_service.get_check_meetings(message.from_user.id)

    event_ids = tuple(event["id"] for event in active_events)
    logger.info(f"event_ids: {event_ids}")
    if deleted_events:
        await bot_service.send_deleted_events(message.from_user.id, deleted_events)
        await message_check.edit_text("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏.")
        return
    if updated_events:
        await bot_service.send_updated_events(message.from_user.id, updated_events)
        await message_check.edit_text("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏.")
        return
    if db.notifications.check_all_notifications_sent(event_ids, message.from_user.id):
        await message_check.edit_text("–ù–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        return
    for i in range(len(active_events)):
        status = db.events.save_event(message.from_user.id, active_events[i])
    await bot_service.send_meetings_check_by_day(message.from_user.id, meetings_by_day)
    if not success:
        await message.answer(error_message)
        return


# –ö–æ–º–∞–Ω–¥–∞ /manualtoken –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
@dp.message(Command("manualtoken"))
async def manual_token_command(message: Message) -> None:
    await message.answer(
        "–î–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        '/settoken {"token": "–≤–∞—à_—Ç–æ–∫–µ–Ω", "refresh_token": "–≤–∞—à_—Ä–µ—Ñ—Ä–µ—à_—Ç–æ–∫–µ–Ω", ...}\n\n'
        "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–∏–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–ª–∏ —á–µ—Ä–µ–∑ API Console."
    )


# –ö–æ–º–∞–Ω–¥–∞ /settoken –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
@dp.message(Command("settoken"))
async def set_token_command(message: Message) -> None:
    if not message.from_user:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    user_id = message.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text is not None:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /settoken"
            )
            return

        token_json = parts[1].strip()
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–∞–≤–Ω–∞ None
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /settoken"
        )
        return

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    is_valid, message_text, token_data = bot_service.validate_token_json(token_json)
    await message.answer(message_text)


# –ö–æ–º–∞–Ω–¥–∞ /week –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é
@dp.message(Command("week"))
async def check_week_meetings(message: Message) -> None:
    if not message.from_user:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    user_id = message.from_user.id
    await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–∏ –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é...")

    (
        success,
        error_message,
        meetings_by_day,
        active_events,
        deleted_events,
        updated_events,
    ) = await bot_service.get_week_meetings(user_id)

    if not success:
        await message.answer(error_message)
        return

    if not meetings_by_day:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é.")
        return

    await bot_service.send_meetings_week_by_day(message.from_user.id, meetings_by_day)


# –ö–æ–º–∞–Ω–¥–∞ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
@dp.message(Command("reset"))
async def reset_processed_events(message: Message) -> None:
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        await message.answer(
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–∞–∫ –æ –Ω–æ–≤—ã—Ö."
        )
        db.notifications.reset_notifications(message.from_user.id)
        db.events.reset_processed_events(message.from_user.id)
    except Exception as e:
        logging.error(f"MOCK:–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå MOCK: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö.")


@dp.message(Command("feedback"))
async def feedback_command(message: Message) -> None:
    feedback_message = await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å –∏ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –ª—É—á—à–µ!",
        reply_markup=ForceReply(
            selective=True,
            input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–¥–µ—Å—å",
        ),
    )
    db.feedback.create_feedback_message_id(
        message.from_user.id, feedback_message.message_id
    )


@dp.callback_query(lambda c: json.loads(c.data).get("t") == "f")
async def process_rating_callback(callback_query: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
    t - —Ç–∏–ø callback
    d - —Ä–µ–π—Ç–∏–Ω–≥
    m - id —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    data = json.loads(callback_query.data)
    rating = data.get("d")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥: {rating}")
    user_id = callback_query.from_user.id
    message_id = data.get("m")
    await callback_query.answer()
    db.feedback.set_rating(user_id, rating, message_id)
    await callback_query.message.edit_text(
        f"üìä –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.\n"
    )


@dp.message(Command("info"))
async def info_command(message: Message) -> None:
    await message.answer(
        "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "/auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "/manualtoken - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É —Ç–æ–∫–µ–Ω–∞\n"
        "/settoken - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é\n"
        "/check - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á\n"
        "/week - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å—Ç—Ä–µ—á –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n"
        "/statistics - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "/reset - –°–±—Ä–æ—Å –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á\n"
        "/feedback - –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
        "/info - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @ImTaske"
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main() -> None:
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    for signal_type in (signal.SIGINT, signal.SIGTERM):
        asyncio.get_event_loop().add_signal_handler(
            signal_type, lambda s=signal_type: asyncio.create_task(on_shutdown(s))
        )

    # asyncio.create_task(schedule_meetings_check())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_file = BASE_DIR / ".bot.lock"

        if lock_file.exists():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            with open(lock_file, "r") as f:
                pid = int(f.read().strip())

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —Ç–∞–∫–∏–º PID
                os.kill(pid, 0)
                logging.error(f"–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {pid}). –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
                sys.exit(1)
            except OSError:
                # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                logging.warning(f"–ù–∞–π–¥–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é.")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π PID –≤ —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        with open(lock_file, "w") as f:
            f.write(str(os.getpid()))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if lock_file.exists():
            lock_file.unlink()
