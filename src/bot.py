import os
import asyncio
import logging
import signal
import sys
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ForceReply
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv

from google_calendar_client import GoogleCalendarClient
from queries import DatabaseQueries
from services import BotService

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
BASE_DIR = Path(__file__).resolve().parent.parent

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
db = DatabaseQueries(str(BASE_DIR / "db.sqlite"))
calendar_client = GoogleCalendarClient(db)
bot = Bot(token=str(os.getenv("BOT_TOKEN")))
bot_service = BotService(db, calendar_client, bot)
dp = Dispatcher()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def schedule_meetings_check():
    """"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
            users = db.tokens.get_all_users()
            for user in users:
                success, error_message, meetings_by_day, active_events = (
                    await bot_service.get_week_meetings(user)  # type: ignore
                )
                event_ids = tuple(event["id"] for event in active_events)
                if db.notifications.check_all_notifications_sent(event_ids, user):  # type: ignore
                    continue
                for i in range(len(active_events)):
                    status = db.events.save_event(user, active_events[i])  # type: ignore
                await bot_service.send_meetings_check_by_day(user, meetings_by_day)
                if not success:
                    await bot.send_message(user, error_message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await asyncio.sleep(int(os.getenv("CHECK_INTERVAL", 300)))


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
async def on_shutdown(signal_type):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_type.name}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db.db.close_all_sessions()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    await bot.session.close()

    sys.exit(0)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def command_start(message: Message) -> None:
    if message.from_user is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    user_id = message.from_user.id

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name if message.from_user.full_name else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n"
        "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–∑–≤–æ–Ω–∞—Ö –≤ Google Meet.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google Calendar.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
        "1. –ß–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: /auth\n"
        "2. –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π): /manualtoken"
    )

    logging.info(
        f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, –∏–º—è: {message.from_user.full_name if message.from_user.full_name else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    )


# –ö–æ–º–∞–Ω–¥–∞ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
@dp.message(Command("auth"))
async def server_auth_command(message: Message) -> None:
    if not message.from_user:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    db.tokens.delete_token_by_user_id(message.from_user.id)
    auth_url = calendar_client.create_auth_url(message.from_user.id)

    if isinstance(auth_url, str) and auth_url.startswith("–û—à–∏–±–∫–∞"):
        await message.answer(
            f"‚ùå {auth_url}\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    auth_message = await message.answer(
        "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:</b>\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n"
        f"{auth_url}\n\n"
        "2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç Google –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n\n"
        "3Ô∏è‚É£ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "‚ùó –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n"
        "- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Google (–Ω–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π)\n"
        "- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ\n"
        "- –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /manualtoken",
        parse_mode="HTML",
        reply_markup=ForceReply(
            selective=True, input_field_placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        ),
    )
    db.tokens.set_auth_message_id(message.from_user.id, str(auth_message.message_id))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    @dp.message()
    async def handle_auth_code(code_message: Message) -> None:
        auth_message_id = db.tokens.get_auth_message_id(code_message.from_user.id)  # type: ignore

        if (
            not code_message.reply_to_message
            or code_message.reply_to_message.message_id
            != int(auth_message_id)  # type: ignore
            or not code_message.from_user
            or code_message.from_user.id != code_message.from_user.id
        ):
            logging.info("–£—Å–ª–æ–≤–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
            return

        code = code_message.text.strip()  # type: ignore
        if not code:
            await code_message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await code_message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            success, message_text = await calendar_client.process_auth_code(
                code_message.from_user.id,
                code,
                {
                    "id": code_message.from_user.id,
                    "username": code_message.from_user.username,
                    "full_name": code_message.from_user.full_name,
                    "is_bot": code_message.from_user.is_bot,
                    "language_code": code_message.from_user.language_code,
                },
            )

            await processing_msg.edit_text(message_text)

            if not success:
                await code_message.answer(
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manualtoken –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞"
                )

        except Exception as e:
            await processing_msg.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manualtoken"
            )


@dp.message(Command("check"))
async def check_command(message: Message) -> None:
    message_check = await message.answer(
        "üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )
    success, error_message, meetings_by_day, active_events = (
        await bot_service.get_week_meetings(message.from_user.id)  # type: ignore
    )
    event_ids = tuple(event["id"] for event in active_events)
    if db.notifications.check_all_notifications_sent(event_ids, message.from_user.id):  # type: ignore
        await message_check.edit_text("–ù–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        return
    for i in range(len(active_events)):
        status = db.events.save_event(message.from_user.id, active_events[i])  # type: ignore
    await bot_service.send_meetings_check_by_day(message.from_user.id, meetings_by_day)  # type: ignore
    if not success:
        await message.answer(error_message)
        return


# –ö–æ–º–∞–Ω–¥–∞ /manualtoken –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
@dp.message(Command("manualtoken"))
async def manual_token_command(message: Message) -> None:
    await message.answer(
        "–î–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        '/settoken {"token": "–≤–∞—à_—Ç–æ–∫–µ–Ω", "refresh_token": "–≤–∞—à_—Ä–µ—Ñ—Ä–µ—à_—Ç–æ–∫–µ–Ω", ...}\n\n'
        "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–∏–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–ª–∏ —á–µ—Ä–µ–∑ API Console."
    )


# –ö–æ–º–∞–Ω–¥–∞ /settoken –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
@dp.message(Command("settoken"))
async def set_token_command(message: Message) -> None:
    if not message.from_user:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    user_id = message.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text is not None:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /settoken"
            )
            return

        token_json = parts[1].strip()
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–∞–≤–Ω–∞ None
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /settoken"
        )
        return

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    is_valid, message_text, token_data = bot_service.validate_token_json(token_json)
    await message.answer(message_text)


# –ö–æ–º–∞–Ω–¥–∞ /week –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é
@dp.message(Command("week"))
async def check_week_meetings(message: Message) -> None:
    if not message.from_user:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    user_id = message.from_user.id
    await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–∏ –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é...")

    success, error_message, meetings_by_day, active_events = (
        await bot_service.get_week_meetings(user_id)
    )

    if not success:
        await message.answer(error_message)
        return

    if not meetings_by_day:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é.")
        return

    await bot_service.send_meetings_week_by_day(message.from_user.id, meetings_by_day)


# –ö–æ–º–∞–Ω–¥–∞ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
@dp.message(Command("reset"))
async def reset_processed_events(message: Message) -> None:
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        await message.answer(
            "‚úÖ MOCK: –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–∞–∫ –æ –Ω–æ–≤—ã—Ö."
        )
    except Exception as e:
        logging.error(f"MOCK:–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå MOCK: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main() -> None:
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    for signal_type in (signal.SIGINT, signal.SIGTERM):
        asyncio.get_event_loop().add_signal_handler(
            signal_type, lambda s=signal_type: asyncio.create_task(on_shutdown(s))  # type: ignore
        )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏—è
    asyncio.create_task(schedule_meetings_check())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_file = BASE_DIR / ".bot.lock"

        if lock_file.exists():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            with open(lock_file, "r") as f:
                pid = int(f.read().strip())

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —Ç–∞–∫–∏–º PID
                os.kill(pid, 0)
                logging.error(f"–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {pid}). –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
                sys.exit(1)
            except OSError:
                # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                logging.warning(f"–ù–∞–π–¥–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é.")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π PID –≤ —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        with open(lock_file, "w") as f:
            f.write(str(os.getpid()))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if lock_file.exists():
            lock_file.unlink()
